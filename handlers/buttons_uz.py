import requests
import json
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ContentType
from requests.auth import HTTPBasicAuth
from datetime import date

from keyboards import lang_btn  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from keyboards import kb_uz, month_uz, years_uz, order_uz, cancel_uz, pays_uz
from state import uz_regis
from loader import dp
from data.config import C_USER, C_PASS, C_URI
from filters import IsPrivate
from utils.db_api import quick_commands as commands


@dp.message_handler(text='–ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à ‚ùå',
                    state=[uz_regis.work_uz, uz_regis.fio_uz, uz_regis.dates_uz, uz_regis.orders_uz, uz_regis.year_uz,
                           uz_regis.months_uz, uz_regis.dayru_uz, uz_regis.paytype_uz])
async def f_quit(message: Message, state: FSMContext):
    await state.finish()
    await message.answer('–ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.', reply_markup=lang_btn)


@dp.message_handler(text='–ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à ‚ùå')
async def quits(message: Message, state: FSMContext):
    await state.finish()
    await message.answer('–ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.', reply_markup=lang_btn)


@dp.message_handler(IsPrivate(), content_types=ContentType.DOCUMENT)  # –õ–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def send_photo_file_id(message: Message):
    await message.reply(message.document.file_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞–∏–ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º


@dp.message_handler(IsPrivate(), text='–é–∑–±–µ–∫—á–∞ üá∫üáø')
async def rusk(mess: Message):
    hello_text = "–ò–ª—Ç–∏–º–æ—Å \"–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç\"–ê–ñ —Ö–æ–¥–∏–º–∏–º–∏—Å–∏–∑ —ë–∫–∏ —ë–∫–∏ –π—û“õ –∫—û—Ä—Å–∞—Ç–∏–Ω–≥!"
    await mess.answer(hello_text, reply_markup=kb_uz)


@dp.message_handler(IsPrivate(), text="\"–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç\"–ê–ñ —Ö–æ–¥–∏–º–∏!")
async def worked(message: Message, state: FSMContext):  # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await message.answer("–¢–∞–±–µ–ª —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥:", reply_markup=kb_uz)
    await uz_regis.work_uz.set()


@dp.message_handler(IsPrivate(), text="\"–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç\"–ê–ñ —Ö–æ–¥–∏–º–∏ —ç–º–∞—Å–º–∞–Ω")
async def not_worked(message: Message, state: FSMContext):  # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

    await message.answer("–§–∞–º–∏–ª–∏—è, –∏—Å–º–∏-—à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥.", reply_markup=cancel_uz)
    await  uz_regis.fio_uz.set()


@dp.message_handler(IsPrivate(), state=uz_regis.work_uz)
async def reg_fio(message: Message, state: FSMContext):  # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await state.update_data(tabel_uz=message.text)
    tabel = message.text
    auth = HTTPBasicAuth(C_USER, C_PASS)
    r = requests.get(C_URI + tabel, auth=auth)
    html = r.text.encode('ISO-8859-1').decode('utf-8-sig')
    json_data = json.loads(html)
    name = json_data['ishchi']
    tel = json_data['telefon']
    if name != None:
        await state.update_data(fio_uz=name)
        await state.update_data(work_uz=True)

        if tel != None:
            await state.update_data(tel_uz=tel)
            await message.answer(f"{name} –±—É—é—Ä—Ç–º–∞ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=order_uz)
            await uz_regis.orders_uz.set()
        else:
            tel_text = '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥!'
            await message.answer(tel_text, reply_markup=cancel_uz)
            await uz_regis.tel_uz.set()
    else:
        work_txt = "–ë—É–Ω–¥–∞–π —Ç–∞–±–µ–ª —Ä–∞“õ–∞–º –º–∞–≤–∂—É–¥ —ç–º–∞—Å!\n–ò–ª—Ç–∏–º–æ—Å \"–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç\"–ê–ñ —Ö–æ–¥–∏–º–∏–º–∏—Å–∏–∑ —ë–∫–∏ —ë–∫–∏ –π—û“õ –∫—û—Ä—Å–∞—Ç–∏–Ω–≥!"
        await message.answer(work_txt, reply_markup=kb_uz)
        await state.finish()


@dp.message_handler(IsPrivate(), state=uz_regis.fio_uz)
async def set_fio(message: Message, state: FSMContext):
    await state.update_data(fio_uz=message.text)
    fio = message.text
    await message.answer(f"{fio} –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥!", reply_markup=cancel_uz)
    await uz_regis.tel_uz.set()


@dp.message_handler(IsPrivate(), state=uz_regis.tel_uz)
async def set_fio(message: Message, state: FSMContext):
    await state.update_data(tel_uz=message.text)
    await message.answer('–ë—É—é—Ä—Ç–º–∞ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=order_uz)
    await uz_regis.orders_uz.set()


@dp.message_handler(IsPrivate(), state=uz_regis.orders_uz)
async def set_fio(message: Message, state: FSMContext):
    order_x = ['–ù–∞“≥–æ—Ä –æ—à–∏', '–ö—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º', '–ö–µ—á–∫–∏ –±–∞–∑–º', '–ù–∞“≥–æ—Ä –æ—à–∏ –≤–∞ –∫—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º', '–ù–∞“≥–æ—Ä –æ—à–∏ –≤–∞ –∫–µ—á–∫–∏ –±–∞–∑–º', '–ö—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º –≤–∞ –∫–µ—á–∫–∏ –±–∞–∑–º', '–ù–∞“≥–æ—Ä –æ—à–∏, –∫—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º –≤–∞ –∫–µ—á–∫–∏ –±–∞–∑–º']
    if message.text in order_x:
        await state.update_data(orders_uz=message.text)
        await message.answer('–ô–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=years_uz)
        await uz_regis.year_uz.set()
    else:
        await message.answer('–ë—É–Ω–¥–∞–π –±—É—é—Ä—Ç–º–∞ –º–∞–≤–∂—É–¥ —ç–º–∞—Å\n–ë—É—é—Ä—Ç–º–∞ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=order_uz)
        await uz_regis.orders_uz.set()


@dp.message_handler(IsPrivate(), state=uz_regis.year_uz)
async def set_fio(message: Message, state: FSMContext):
    year_now = date.today()
    if message.text == f'{year_now.year}' or message.text == f'{int(year_now.year) + 1}' or message.text == f'{int(year_now.year) + 2}':
        await state.update_data(year_uz=message.text)
    else:
        await message.answer('–®—É —ë–∫–∏ –∫–µ–ª–∞—Å–∏ –π–∏–ª–ª–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=years_uz)
        await uz_regis.year_uz.set()

    data = await state.get_data()
    years = data.get("year_uz")
    if years == f'{year_now.year}':
        i = year_now.month
        jan = ''
        feb = ''
        mar = ''
        apr = ''
        may = ''
        jun = ''
        jul = ''
        avg = ''
        sep = ''
        octob = ''
        nov = ''
        dec = ''
        while i < 13:
            if i == 1:
                jan = '–Ø–Ω–≤–∞—Ä'
                i += 1
            if i == 2:
                feb = '–§–µ–≤—Ä–∞–ª'
                i += 1
            if i == 3:
                mar = '–ú–∞—Ä—Ç'
                i += 1
            if i == 4:
                apr = '–ê–ø—Ä–µ–ª'
                i += 1
            if i == 5:
                may = '–ú–∞–π'
                i += 1
            if i == 6:
                jun = '–ò—é–Ω'
                i += 1
            if i == 7:
                jul = '–ò—é–ª'
                i += 1
            if i == 8:
                avg = '–ê–≤–≥—É—Å—Ç'
                i += 1
            if i == 9:
                sep = '–°–µ–Ω—Ç—è–±—Ä'
                i += 1
            if i == 10:
                octob = '–û–∫—Ç—è–±—Ä'
                i += 1
            if i == 11:
                nov = '–ù–æ—è–±—Ä'
                i += 1
            if i == 12:
                dec = '–î–µ–∫–∞–±—Ä'
                i += 1
            break

    else:
        jan = '–Ø–Ω–≤–∞—Ä'
        feb = '–§–µ–≤—Ä–∞–ª'
        mar = '–ú–∞—Ä—Ç'
        apr = '–ê–ø—Ä–µ–ª'
        may = '–ú–∞–π'
        jun = '–ò—é–Ω'
        jul = '–ò—é–ª'
        avg = '–ê–≤–≥—É—Å—Ç'
        sep = '–°–µ–Ω—Ç—è–±—Ä'
        octob = '–û–∫—Ç—è–±—Ä'
        nov = '–ù–æ—è–±—Ä'
        dec = '–î–µ–∫–∞–±—Ä'

    mont_uz = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=f'{jan}'),
                KeyboardButton(text=f'{feb}')
            ],
            [
                KeyboardButton(text=f'{mar}'),
                KeyboardButton(text=f'{apr}')
            ],
            [
                KeyboardButton(text=f'{may}'),
                KeyboardButton(text=f'{jun}')
            ],
            [
                KeyboardButton(text=f'{jul}'),
                KeyboardButton(text=f'{avg}')
            ],
            [
                KeyboardButton(text=f'{sep}'),
                KeyboardButton(text=f'{octob}')
            ],
            [
                KeyboardButton(text=f'{nov}'),
                KeyboardButton(text=f'{dec}')
            ],
            [
                KeyboardButton(text='–ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à ‚ùå')
            ],
        ],
        resize_keyboard=True,
    )

    await message.answer('–û–π–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=mont_uz)
    await uz_regis.months_uz.set()


@dp.message_handler(IsPrivate(), state=uz_regis.months_uz)
async def set_fio(message: Message, state: FSMContext):
    if message.text == '–Ø–Ω–≤–∞—Ä':
        await state.update_data(months_uz=1)
        await state.update_data(months_txt='–Ø–Ω–≤–∞—Ä')
    elif message.text == '–§–µ–≤—Ä–∞–ª':
        await state.update_data(months_uz=2)
        await state.update_data(months_txt='–§–µ–≤—Ä–∞–ª')
    elif message.text == '–ú–∞—Ä—Ç':
        await state.update_data(months_uz=3)
        await state.update_data(months_txt='–ú–∞—Ä—Ç')
    elif message.text == '–ê–ø—Ä–µ–ª':
        await state.update_data(months_uz=4)
        await state.update_data(months_txt='–ê–ø—Ä–µ–ª')
    elif message.text == '–ú–∞–π':
        await state.update_data(months_uz=5)
        await state.update_data(months_txt='–ú–∞–π')
    elif message.text == '–ò—é–Ω':
        await state.update_data(months_uz=6)
        await state.update_data(months_txt='–ò—é–Ω')
    elif message.text == '–ò—é–ª':
        await state.update_data(months_uz=7)
        await state.update_data(months_txt='–ò—é–ª')
    elif message.text == '–ê–≤–≥—É—Å—Ç':
        await state.update_data(months_uz=8)
        await state.update_data(months_txt='–ê–≤–≥—É—Å—Ç')
    elif message.text == '–°–µ–Ω—Ç—è–±—Ä':
        await state.update_data(months_uz=9)
        await state.update_data(months_txt='–°–µ–Ω—Ç—è–±—Ä')
    elif message.text == '–û–∫—Ç—è–±—Ä':
        await state.update_data(months_uz=10)
        await state.update_data(months_txt='–û–∫—Ç—è–±—Ä')
    elif message.text == '–ù–æ—è–±—Ä':
        await state.update_data(months_uz=11)
        await state.update_data(months_txt='–ù–æ—è–±—Ä')
    elif message.text == '–î–µ–∫–∞–±—Ä':
        await state.update_data(months_uz=12)
        await state.update_data(months_txt='–î–µ–∫–∞–±—Ä')
    else:
        await message.answer('–ë—É–Ω–¥–∞–π –æ–π –π—û“õ.\n–¢—û“ì—Ä–∏ –æ–π–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=month_uz)
        await uz_regis.months_uz.set()

    all_orders = await commands.select_all_orders()
    days = []
    data = await state.get_data()
    client_orders = data.get('orders_uz')
    years = data.get('year_uz')
    monthsx = data.get('months_uz')
    noxor1 = 0
    kunduz1 = 0
    kech1 = 0
    if client_orders == '–ù–∞“≥–æ—Ä –æ—à–∏':
        await state.update_data(noxor_uz=True)
        noxor1 = 1
    elif client_orders == '–ö—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º':
        await state.update_data(kunduz_uz=True)
        kunduz1 = 1
    elif client_orders == '–ö–µ—á–∫–∏ –±–∞–∑–º':
        await state.update_data(kech_uz=True)
        kech1 = 1
    elif client_orders == '–ù–∞“≥–æ—Ä –æ—à–∏ –≤–∞ –∫—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º':
        await state.update_data(noxor_uz=True)
        await state.update_data(kunduz_uz=True)
        noxor1 = 1
        kunduz1 = 1
    elif client_orders == '–ù–∞“≥–æ—Ä –æ—à–∏ –≤–∞ –∫–µ—á–∫–∏ –±–∞–∑–º':
        await state.update_data(noxor_uz=True)
        await state.update_data(kech_uz=True)
        kech1 = 1
        noxor1 = 1
    elif client_orders == '–ö—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º –≤–∞ –∫–µ—á–∫–∏ –±–∞–∑–º':
        await state.update_data(kech_uz=True)
        await state.update_data(kunduz_uz=True)
        kunduz1 = 1
        kech1 = 1
    elif client_orders == '–ù–∞“≥–æ—Ä –æ—à–∏, –∫—É–Ω–¥—É–∑–≥–∏ –±–∞–∑–º –≤–∞ –∫–µ—á–∫–∏ –±–∞–∑–º':
        await state.update_data(noxor_uz=True)
        await state.update_data(kech_uz=True)
        await state.update_data(kunduz_uz=True)
        noxor1 = 1
        kunduz1 = 1
        kech1 = 1
    else:
        await message.answer("–ë—É—é—Ä—Ç–º–∞ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=order_uz)
        await uz_regis.orders_uz.set()

    for items in all_orders:
        if items.pay_status and items.dates.month == int(monthsx):
            if noxor1 == 1 and kunduz1 == 1:
                if items.noxor and items.kunduz:
                    days.append(items.dates.day)
            if noxor1 == 1 and kech1 == 1:
                if items.noxor and items.kech:
                    days.append(items.dates.day)
            if kunduz1 == 1 and kech1 == 1:
                if items.kunduz and items.kech:
                    days.append(items.dates.day)
            if noxor1 == 1:
                if items.noxor:
                    days.append(items.dates.day)
            if kunduz1 == 1:
                if items.kunduz:
                    days.append(items.dates.day)
            if kech1 == 1:
                if items.kech:
                    days.append(items.dates.day)

    list3 = []
    try:
        for i in range(1, 32):
            year_now = date(int(years), int(monthsx), i)
            if i in days:
                continue
            list3.append(i)
            day = year_now.day
    except ValueError:
        pass

    kb_list1 = []
    kb_list2 = []
    kb_list3 = []
    kb_list4 = []
    kb_list5 = []
    kb = [kb_list1, kb_list2, kb_list3, kb_list4, kb_list5]
    if list3 == []:
        await message.answer('–ë—É –æ–π–¥–∞ –±–∞—Ä—á–∞ –∫—É–Ω–ª–∞—Ä –±–∞–Ω–¥\n–ô–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=years_uz)
        await uz_regis.year_uz.set()
    else:
        for it in list3:
            if it <= 6:
                kb_list1.append(KeyboardButton(text=f'{it}'))
            elif 6 < it <= 12:
                kb_list2.append(KeyboardButton(text=f'{it}'))
            elif 12 < it <= 18:
                kb_list3.append(KeyboardButton(text=f'{it}'))
            elif 18 < it <= 24:
                kb_list4.append(KeyboardButton(text=f'{it}'))
            elif 24 < it <= 31:
                kb_list5.append(KeyboardButton(text=f'{it}'))

        cancel_kb = [KeyboardButton(text='–ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à ‚ùå')]
        kb.append(cancel_kb)
        cancel = ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.update_data(day_x=days)
        await message.answer('–ö—É–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=cancel)
        await uz_regis.dayru_uz.set()


@dp.message_handler(IsPrivate(), state=uz_regis.dayru_uz)
async def set_day(message: Message, state: FSMContext):
    datta = await state.get_data()
    day_x = datta.get('day_x')
    text = message.text
    days_x = [i for i in range(1, 32)]
    try:
        if int(text) in days_x:
            if int(text) in day_x:
                await state.finish()
                await message.answer('–ë—É –∫—É–Ω –±–∞–Ω–¥. –ë—É—é—Ä—Ç–º–∞ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏!', reply_markup=lang_btn)
            else:
                await state.update_data(days_uz=message.text)
                data = await state.get_data()
                days_uz = data.get('days_uz')
                fio_uz = data.get('fio_uz')
                client_orders_uz = data.get('orders_uz')
                year_uz = data.get('year_uz')
                months_txt_uz = data.get('months_txt')
                mont_uz = data.get('months_uz')
                tel_uz = data.get('tel_uz')
                year_nows = date(int(year_uz), int(mont_uz), int(days_uz))
                year_now = date.today()
                a = year_nows - year_now
                if a.days < 0:
                    await state.finish()
                    await message.answer('–é—Ç–≥–∞–Ω –∫—É–Ω–≥–∞ –±—É—é—Ä—Ç–º–∞ –±–µ—Ä–∏–± –±—û–ª–º–∞–π–¥–∏!\n\n–ë—É—é—Ä—Ç–º–∞ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏', reply_markup=lang_btn)
                else:
                    txt = f'{fio_uz} –°–∏–∑ {client_orders_uz} {days_uz}-{months_txt_uz} {year_uz}–π. –∫—É–Ω–∏–≥–∞ –±—É—é—Ä—Ç–º–∞ –±–µ–º–æ“õ—á–∏–º–∏—Å–∏–∑?\n\n{tel_uz}-–°–∏–∑–Ω–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ —à—É–º–∏?\n–ê–≥–∞—Ä —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ –±–æ—à“õ–∞ –±—û–ª—Å–∞, —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ 1–° —Ç–∏–∑–∏–º–∏–¥–∞–Ω —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–Ω–≥\n\n–ë—É—é—Ä—Ç–º–∞ –±–µ—Ä–∏—à–Ω–∏–Ω–≥ –±–æ—à–ª–∞–Ω“ì–∏—á —Ç—û–ª–æ–≤–∏ 1 000 000 —Å—û–º.\n\n–ê–≥–∞—Ä –∏—à–æ–Ω—á–∏–Ω–≥–∏–∑ –∫–æ–º–∏–ª –±—û–ª—Å–∞ —Ç—û–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.\n\n*\'–ù–∞“õ—Ç –ø—É–ª–≥–∞ üíµ\' —Ç—û–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞—Å–∞–Ω–≥–∏–∑, —Ç—û–ª–æ–≤–Ω–∏ –±–∏—Ä–∏–Ω—á–∏ –∞–º–∞–ª–≥–∞ –æ—à–∏—Ä–≥–∞–Ω —à–∞—Ö—Å–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞—Å–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–∞–¥–∏. \n\n–¢—û–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:'
                    await message.answer(txt, reply_markup=pays_uz)
                    await uz_regis.paytype_uz.set()
    except Exception:
        await message.answer('–•–∞—Ç–æ–ª–∏–∫. –ë—É—é—Ä—Ç–º–∞ –±–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏!', reply_markup=lang_btn)
        await state.finish()

@dp.message_handler(IsPrivate(), state=uz_regis.paytype_uz)
async def set_fio(message: Message, state: FSMContext):
    pay_x = ['Click üí≥', 'Payme üí≥', '–ù–∞“õ—Ç –ø—É–ª–≥–∞ üíµ']
    if message.text in pay_x:
        await state.update_data(pay_type_uz=message.text)
        data = await state.get_data()
        fio_uz = data.get('fio_uz')
        work_uz = data.get('work_uz')
        year_uz = data.get('year_uz')
        mont_uz = data.get('months_uz')
        days_uz = data.get('days_uz')
        tabel_uz = data.get('tabel_uz')
        pay_type_uz = data.get('pay_type_uz')
        noxor_uz = data.get('noxor_uz')
        kunduz_uz = data.get('kunduz_uz')
        kech_uz = data.get('kech_uz')
        sums_uz = 0
        tel_uz = data.get('tel_uz')
        year_nows = date(int(year_uz), int(mont_uz), int(days_uz))
        user_id = message.from_user.id
        await state.finish()
        await commands.add_orders(user_id, fio_uz, year_nows, tabel_uz, pay_type_uz, work_uz, noxor_uz, kunduz_uz, kech_uz,
                                  sums_uz, tel_uz)

        if pay_type_uz == '–ù–∞“õ—Ç –ø—É–ª–≥–∞ üíµ':
            order = await commands.select_order_id(fio_uz)
            txt = f'–ë—É—é—Ä—Ç–º–∞ —Ä–∞“õ–∞–º–∏: <b>{order.order_id}\n{fio_uz}</b> –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ —ë–∑–∏–ª–¥–∏!, –ª–µ–∫–∏–Ω —É–Ω–∏ –∫—É—á–≥–∞ –∫–∏—Ä–∏—à–∏ —É—á—É–Ω —Ç—û–ª–æ–≤–Ω–∏ –∞–º–∞–ª–≥–∞ –æ—à–∏—Ä–∏—à–∏–Ω–≥–∏–∑ –∫–µ—Ä–∞–∫!'
            await message.answer(txt, reply_markup=lang_btn)
        elif pay_type_uz == 'Click üí≥':
            pass
        elif pay_type_uz == 'Payme üí≥':
            pass
        else:
            await message.answer('–•–∞—Ç–æ–ª–∏–∫. –ë—É—é—Ä—Ç–º–∞ –±–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏!', reply_markup=lang_btn)
    else:
        await message.answer('–¢—û–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=pays_uz)
        await uz_regis.paytype_uz.set()
