import json
import requests
from requests.auth import HTTPBasicAuth
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ContentType
from datetime import date

from data.config import C_USER, C_PASS, C_URI
from keyboards import kb_ru, month, year, order, pays, cancel
from loader import dp
from state import regis
from keyboards import lang_btn
from filters import IsPrivate
from utils.db_api import quick_commands as commands


@dp.message_handler(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå',
                    state=[regis.work, regis.fio, regis.dates, regis.orders, regis.year, regis.months, regis.dayru,
                           regis.paytype])
async def quit(message: Message, state: FSMContext):
    await state.finish()
    await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=lang_btn)


@dp.message_handler(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå')
async def quits(message: Message, state: FSMContext):
    await state.finish()
    await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=lang_btn)


@dp.message_handler(IsPrivate(), content_types=ContentType.DOCUMENT)  # –õ–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def send_photo_file_id(message: Message):
    await message.reply(message.document.file_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞–∏–ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º


@dp.message_handler(IsPrivate(), text='–†—É—Å—Å–∫–∏–π üá∑üá∫')
async def rusk(mess: Message):
    hello_text = "–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ê–û\"–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç\"!"
    await mess.answer(hello_text, reply_markup=kb_ru)


@dp.message_handler(IsPrivate(), text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–û "–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç"')
async def worked(message: Message, state: FSMContext):  # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±‚Ññ:", reply_markup=kb_ru)
    await regis.work.set()


@dp.message_handler(IsPrivate(), text='–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ê–û "–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç"')
async def not_worked(message: Message, state: FSMContext):  # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ.", reply_markup=cancel)
    await regis.fio.set()


@dp.message_handler(IsPrivate(), state=regis.work)
async def reg_fio(message: Message, state: FSMContext):  # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await state.update_data(tabel=message.text)
    tabel = message.text
    auth = HTTPBasicAuth(C_USER, C_PASS)
    r = requests.get(C_URI + tabel, auth=auth)
    html = r.text.encode('ISO-8859-1').decode('utf-8-sig')
    json_data = json.loads(html)
    name = json_data['ishchi']
    tel = json_data['telefon']
    if name != None:
        await state.update_data(fio=name)
        await state.update_data(work=True)

        if tel != None:
            await state.update_data(tel=tel)
            await message.answer(f"{name} –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:", reply_markup=order)
            await regis.orders.set()
        else:
            tel_text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä!'
            await message.answer(tel_text, reply_markup=cancel)
            await regis.tel.set()
    else:
        work_txt = "–¢–∞–∫–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ê–û\"–£–∑–º–µ—Ç–∫–æ–º–±–∏–Ω–∞—Ç\"!"
        await message.answer(work_txt, reply_markup=kb_ru)
        await state.finish()


@dp.message_handler(IsPrivate(), state=regis.fio)
async def set_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    fio = message.text
    await message.answer(f"{fio} –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä!", reply_markup=cancel)
    await regis.tel.set()


@dp.message_handler(IsPrivate(), state=regis.tel)
async def set_fio(message: Message, state: FSMContext):
    await state.update_data(tel=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:', reply_markup=order)
    await regis.orders.set()


@dp.message_handler(IsPrivate(), state=regis.orders)
async def set_fio(message: Message, state: FSMContext):
    orders_x = ['–ù–æ—Ö–æ—Ä –æ—à', '–î–Ω–µ–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–í–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–ù–æ—Ö–æ—Ä –æ—à–∏ –∏ –¥–Ω–µ–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                '–ù–æ—Ö–æ—Ä –æ—à–∏ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–î–Ω–µ–≤–Ω–æ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–ù–æ—Ö–æ—Ä –æ—à–∏, –¥–Ω–µ–≤–Ω–æ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']
    if message.text in orders_x:
        await state.update_data(orders=message.text)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:', reply_markup=year)
        await regis.year.set()
    else:
        await message.answer('–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:', reply_markup=order)
        await regis.orders.set()


@dp.message_handler(IsPrivate(), state=regis.year)
async def set_fio(message: Message, state: FSMContext):
    year_now = date.today()
    if message.text == f'{year_now.year}' or message.text == f'{int(year_now.year) + 1}' or message.text == f'{int(year_now.year) + 2}':
        await state.update_data(year=message.text)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≥–æ–¥–∞:', reply_markup=year)
        await regis.year.set()

    data = await state.get_data()
    years = data.get("year")
    if years == f'{year_now.year}':
        i = year_now.month
        jan = ''
        feb = ''
        mar = ''
        apr = ''
        may = ''
        jun = ''
        jul = ''
        avg = ''
        sep = ''
        octob = ''
        nov = ''
        dec = ''
        while i < 13:
            if i == 1:
                jan = '–Ø–Ω–≤–∞—Ä—å'
                i += 1
            if i == 2:
                feb = '–§–µ–≤—Ä–∞–ª—å'
                i += 1
            if i == 3:
                mar = '–ú–∞—Ä—Ç'
                i += 1
            if i == 4:
                apr = '–ê–ø—Ä–µ–ª—å'
                i += 1
            if i == 5:
                may = '–ú–∞–π'
                i += 1
            if i == 6:
                jun = '–ò—é–Ω—å'
                i += 1
            if i == 7:
                jul = '–ò—é–ª—å'
                i += 1
            if i == 8:
                avg = '–ê–≤–≥—É—Å—Ç'
                i += 1
            if i == 9:
                sep = '–°–µ–Ω—Ç—è–±—Ä—å'
                i += 1
            if i == 10:
                octob = '–û–∫—Ç—è–±—Ä—å'
                i += 1
            if i == 11:
                nov = '–ù–æ—è–±—Ä—å'
                i += 1
            if i == 12:
                dec = '–î–µ–∫–∞–±—Ä—å'
                i += 1
            break

    else:
        jan = '–Ø–Ω–≤–∞—Ä—å'
        feb = '–§–µ–≤—Ä–∞–ª—å'
        mar = '–ú–∞—Ä—Ç'
        apr = '–ê–ø—Ä–µ–ª—å'
        may = '–ú–∞–π'
        jun = '–ò—é–Ω—å'
        jul = '–ò—é–ª—å'
        avg = '–ê–≤–≥—É—Å—Ç'
        sep = '–°–µ–Ω—Ç—è–±—Ä—å'
        octob = '–û–∫—Ç—è–±—Ä—å'
        nov = '–ù–æ—è–±—Ä—å'
        dec = '–î–µ–∫–∞–±—Ä—å'

    mont = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=f'{jan}'),
                KeyboardButton(text=f'{feb}')
            ],
            [
                KeyboardButton(text=f'{mar}'),
                KeyboardButton(text=f'{apr}')
            ],
            [
                KeyboardButton(text=f'{may}'),
                KeyboardButton(text=f'{jun}')
            ],
            [
                KeyboardButton(text=f'{jul}'),
                KeyboardButton(text=f'{avg}')
            ],
            [
                KeyboardButton(text=f'{sep}'),
                KeyboardButton(text=f'{octob}')
            ],
            [
                KeyboardButton(text=f'{nov}'),
                KeyboardButton(text=f'{dec}')
            ],
            [
                KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå')
            ],
        ],
        resize_keyboard=True,
    )

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', reply_markup=mont)
    await regis.months.set()


@dp.message_handler(IsPrivate(), state=regis.months)
async def set_fio(message: Message, state: FSMContext):
    if message.text == '–Ø–Ω–≤–∞—Ä—å':
        await state.update_data(months=1)
        await state.update_data(months_txt='–Ø–Ω–≤–∞—Ä—å')
    elif message.text == '–§–µ–≤—Ä–∞–ª—å':
        await state.update_data(months=2)
        await state.update_data(months_txt='–§–µ–≤—Ä–∞–ª—å')
    elif message.text == '–ú–∞—Ä—Ç':
        await state.update_data(months=3)
        await state.update_data(months_txt='–ú–∞—Ä—Ç')
    elif message.text == '–ê–ø—Ä–µ–ª—å':
        await state.update_data(months=4)
        await state.update_data(months_txt='–ê–ø—Ä–µ–ª—å')
    elif message.text == '–ú–∞–π':
        await state.update_data(months=5)
        await state.update_data(months_txt='–ú–∞–π')
    elif message.text == '–ò—é–Ω—å':
        await state.update_data(months=6)
        await state.update_data(months_txt='–ò—é–Ω—å')
    elif message.text == '–ò—é–ª—å':
        await state.update_data(months=7)
        await state.update_data(months_txt='–ò—é–ª—å')
    elif message.text == '–ê–≤–≥—É—Å—Ç':
        await state.update_data(months=8)
        await state.update_data(months_txt='–ê–≤–≥—É—Å—Ç')
    elif message.text == '–°–µ–Ω—Ç—è–±—Ä—å':
        await state.update_data(months=9)
        await state.update_data(months_txt='–°–µ–Ω—Ç—è–±—Ä—å')
    elif message.text == '–û–∫—Ç—è–±—Ä—å':
        await state.update_data(months=10)
        await state.update_data(months_txt='–û–∫—Ç—è–±—Ä—å')
    elif message.text == '–ù–æ—è–±—Ä—å':
        await state.update_data(months=11)
        await state.update_data(months_txt='–ù–æ—è–±—Ä—å')
    elif message.text == '–î–µ–∫–∞–±—Ä—å':
        await state.update_data(months=12)
        await state.update_data(months_txt='–î–µ–∫–∞–±—Ä—å')
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Å—è—Ü:', reply_markup=month)
        await regis.months.set()

    all_orders = await commands.select_all_orders()
    days = []
    data = await state.get_data()
    client_orders = data.get('orders')
    years = data.get('year')
    monthsx = data.get('months')
    noxor1 = 0
    kunduz1 = 0
    kech1 = 0
    if client_orders == '–ù–æ—Ö–æ—Ä –æ—à':
        await state.update_data(noxor=True)
        noxor1 = 1
    elif client_orders == '–î–Ω–µ–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        await state.update_data(kunduz=True)
        kunduz1 = 1
    elif client_orders == '–í–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        await state.update_data(kech=True)
        kech1 = 1
    elif client_orders == '–ù–æ—Ö–æ—Ä –æ—à–∏ –∏ –¥–Ω–µ–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        await state.update_data(noxor=True)
        await state.update_data(kunduz=True)
        noxor1 = 1
        kunduz1 = 1
    elif client_orders == '–ù–æ—Ö–æ—Ä –æ—à–∏ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        await state.update_data(noxor=True)
        await state.update_data(kech=True)
        kech1 = 1
        noxor1 = 1
    elif client_orders == '–î–Ω–µ–≤–Ω–æ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        await state.update_data(kech=True)
        await state.update_data(kunduz=True)
        kunduz1 = 1
        kech1 = 1
    elif client_orders == '–ù–æ—Ö–æ—Ä –æ—à–∏, –¥–Ω–µ–≤–Ω–æ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
        await state.update_data(noxor=True)
        await state.update_data(kech=True)
        await state.update_data(kunduz=True)
        noxor1 = 1
        kunduz1 = 1
        kech1 = 1
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:", reply_markup=order)
        await regis.orders.set()

    for items in all_orders:
        if items.pay_status and items.dates.month == int(monthsx):
            if noxor1 == 1 and kunduz1 == 1:
                if items.noxor and items.kunduz:
                    days.append(items.dates.day)
            if noxor1 == 1 and kech1 == 1:
                if items.noxor and items.kech:
                    days.append(items.dates.day)
            if kunduz1 == 1 and kech1 == 1:
                if items.kunduz and items.kech:
                    days.append(items.dates.day)
            if noxor1 == 1:
                if items.noxor:
                    days.append(items.dates.day)
            if kunduz1 == 1:
                if items.kunduz:
                    days.append(items.dates.day)
            if kech1 == 1:
                if items.kech:
                    days.append(items.dates.day)

    list3 = []
    try:
        for i in range(1, 32):
            year_now = date(int(years), int(monthsx), i)
            if i in days:
                continue
            list3.append(i)
            day = year_now.day
    except ValueError:
        pass
    kb_list1 = []
    kb_list2 = []
    kb_list3 = []
    kb_list4 = []
    kb_list5 = []
    kb = [kb_list1, kb_list2, kb_list3, kb_list4, kb_list5]
    if list3 == []:
        await message.answer('–í—Å–µ –¥–Ω–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∑–∞–Ω—è—Ç—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü:', reply_markup=month)
        await regis.months.set()
    else:
        for it in list3:
            if it <= 6:
                kb_list1.append(KeyboardButton(text=f'{it}'))
            elif 6 < it <= 12:
                kb_list2.append(KeyboardButton(text=f'{it}'))
            elif 12 < it <= 18:
                kb_list3.append(KeyboardButton(text=f'{it}'))
            elif 18 < it <= 24:
                kb_list4.append(KeyboardButton(text=f'{it}'))
            elif 24 < it <= 31:
                kb_list5.append(KeyboardButton(text=f'{it}'))

        cancel_kb = [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå')]
        kb.append(cancel_kb)
        cancel = ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.update_data(day_x=days)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=cancel)
        await regis.dayru.set()


@dp.message_handler(IsPrivate(), state=regis.dayru)
async def set_day(message: Message, state: FSMContext):
    datta = await state.get_data()
    day_x = datta.get('day_x')
    text = message.text
    days_x = [i for i in range(1, 32)]
    try:
        if int(text) in days_x:
            if int(text) in day_x:
                await state.finish()
                await message.answer('–≠—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!', reply_markup=lang_btn)
            else:
                await state.update_data(days=message.text)
                data = await state.get_data()
                days = data.get('days')
                fio = data.get('fio')
                client_orders = data.get('orders')
                years = data.get('year')
                months_txt = data.get('months_txt')
                months = data.get('months')
                tel = data.get('tel')
                year_nows = date(int(years), int(months), int(days))
                year_now = date.today()
                a = year_nows - year_now
                if a.days < 0:
                    await state.finish()
                    await message.answer('–ù–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ—à–µ–¥—â–∏–º –¥–Ω—ë–º!\n–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=lang_btn)
                else:
                    txt = f'{fio} –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç {client_orders} –Ω–∞ {days}-{months_txt} {years} –≥–æ–¥?\n{tel}-–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?\n–°—É–º–º–∞ –¥–ª—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 1 000 000 —Å—É–º–æ–≤\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã.\n*–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è –¥–µ–Ω—å —Ç–æ–º—É –∫—Ç–æ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:'
                    await message.answer(txt, reply_markup=pays)
                    await regis.paytype.set()
    except Exception:
        await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=lang_btn)
        await state.finish()


@dp.message_handler(IsPrivate(), state=regis.paytype)
async def set_fio(message: Message, state: FSMContext):
    pays_x = ['Click üí≥', 'Payme üí≥', '–ù–∞–ª–∏—á–Ω—ã–º–∏ üíµ']
    if message.text in pays_x:
        await state.update_data(pay_type=message.text)
        data = await state.get_data()
        fio = data.get('fio')
        work = data.get('work')
        years = data.get('year')
        months = data.get('months')
        days = data.get('days')
        tabel = data.get('tabel')
        pay_type = data.get('pay_type')
        noxor = data.get('noxor')
        kunduz = data.get('kunduz')
        kech = data.get('kech')
        sums = 0
        tel = data.get('tel')
        year_nows = date(int(years), int(months), int(days))
        user_id = message.from_user.id
        await state.finish()
        await commands.add_orders(user_id, fio, year_nows, tabel, pay_type, work, noxor, kunduz, kech, sums, tel)

        if pay_type == '–ù–∞–ª–∏—á–Ω—ã–º–∏ üíµ':
            order = await commands.select_order_id(fio)
            txt = f'{fio} –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ {order.order_id}, –Ω–æ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –µ–≥–æ –≤ —Å–∏–ª—É –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–∑—Ç–∏ –æ–ø–ª–∞—Ç—É'
            await message.answer(txt, reply_markup=lang_btn)
        elif pay_type == 'Click üí≥':
            pass
        elif pay_type == 'Payme üí≥':
            pass
        else:
            await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=lang_btn)

    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:', reply_markup=pays)
        await regis.paytype.set()
